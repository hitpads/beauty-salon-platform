// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: user_master.proto

package usermaster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserMasterService_RegisterUser_FullMethodName   = "/usermaster.UserMasterService/RegisterUser"
	UserMasterService_LoginUser_FullMethodName      = "/usermaster.UserMasterService/LoginUser"
	UserMasterService_GetUserProfile_FullMethodName = "/usermaster.UserMasterService/GetUserProfile"
	UserMasterService_ListMasters_FullMethodName    = "/usermaster.UserMasterService/ListMasters"
	UserMasterService_GetMasterByID_FullMethodName  = "/usermaster.UserMasterService/GetMasterByID"
	UserMasterService_CreateMaster_FullMethodName   = "/usermaster.UserMasterService/CreateMaster"
	UserMasterService_UpdateMaster_FullMethodName   = "/usermaster.UserMasterService/UpdateMaster"
)

// UserMasterServiceClient is the client API for UserMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserMasterServiceClient interface {
	RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserResponse, error)
	LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GetUserProfile(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// Master-specific
	ListMasters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMastersResponse, error)
	GetMasterByID(ctx context.Context, in *MasterIdRequest, opts ...grpc.CallOption) (*MasterResponse, error)
	CreateMaster(ctx context.Context, in *CreateMasterRequest, opts ...grpc.CallOption) (*MasterResponse, error)
	UpdateMaster(ctx context.Context, in *UpdateMasterRequest, opts ...grpc.CallOption) (*MasterResponse, error)
}

type userMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMasterServiceClient(cc grpc.ClientConnInterface) UserMasterServiceClient {
	return &userMasterServiceClient{cc}
}

func (c *userMasterServiceClient) RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserMasterService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMasterServiceClient) LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, UserMasterService_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMasterServiceClient) GetUserProfile(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserMasterService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMasterServiceClient) ListMasters(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMastersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMastersResponse)
	err := c.cc.Invoke(ctx, UserMasterService_ListMasters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMasterServiceClient) GetMasterByID(ctx context.Context, in *MasterIdRequest, opts ...grpc.CallOption) (*MasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MasterResponse)
	err := c.cc.Invoke(ctx, UserMasterService_GetMasterByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMasterServiceClient) CreateMaster(ctx context.Context, in *CreateMasterRequest, opts ...grpc.CallOption) (*MasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MasterResponse)
	err := c.cc.Invoke(ctx, UserMasterService_CreateMaster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMasterServiceClient) UpdateMaster(ctx context.Context, in *UpdateMasterRequest, opts ...grpc.CallOption) (*MasterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MasterResponse)
	err := c.cc.Invoke(ctx, UserMasterService_UpdateMaster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMasterServiceServer is the server API for UserMasterService service.
// All implementations must embed UnimplementedUserMasterServiceServer
// for forward compatibility.
type UserMasterServiceServer interface {
	RegisterUser(context.Context, *RegisterRequest) (*UserResponse, error)
	LoginUser(context.Context, *LoginRequest) (*LoginResponse, error)
	GetUserProfile(context.Context, *UserIdRequest) (*UserResponse, error)
	// Master-specific
	ListMasters(context.Context, *Empty) (*ListMastersResponse, error)
	GetMasterByID(context.Context, *MasterIdRequest) (*MasterResponse, error)
	CreateMaster(context.Context, *CreateMasterRequest) (*MasterResponse, error)
	UpdateMaster(context.Context, *UpdateMasterRequest) (*MasterResponse, error)
	mustEmbedUnimplementedUserMasterServiceServer()
}

// UnimplementedUserMasterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserMasterServiceServer struct{}

func (UnimplementedUserMasterServiceServer) RegisterUser(context.Context, *RegisterRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserMasterServiceServer) LoginUser(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserMasterServiceServer) GetUserProfile(context.Context, *UserIdRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserMasterServiceServer) ListMasters(context.Context, *Empty) (*ListMastersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMasters not implemented")
}
func (UnimplementedUserMasterServiceServer) GetMasterByID(context.Context, *MasterIdRequest) (*MasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterByID not implemented")
}
func (UnimplementedUserMasterServiceServer) CreateMaster(context.Context, *CreateMasterRequest) (*MasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaster not implemented")
}
func (UnimplementedUserMasterServiceServer) UpdateMaster(context.Context, *UpdateMasterRequest) (*MasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaster not implemented")
}
func (UnimplementedUserMasterServiceServer) mustEmbedUnimplementedUserMasterServiceServer() {}
func (UnimplementedUserMasterServiceServer) testEmbeddedByValue()                           {}

// UnsafeUserMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserMasterServiceServer will
// result in compilation errors.
type UnsafeUserMasterServiceServer interface {
	mustEmbedUnimplementedUserMasterServiceServer()
}

func RegisterUserMasterServiceServer(s grpc.ServiceRegistrar, srv UserMasterServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserMasterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserMasterService_ServiceDesc, srv)
}

func _UserMasterService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMasterServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMasterService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMasterServiceServer).RegisterUser(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMasterService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMasterServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMasterService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMasterServiceServer).LoginUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMasterService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMasterServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMasterService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMasterServiceServer).GetUserProfile(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMasterService_ListMasters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMasterServiceServer).ListMasters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMasterService_ListMasters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMasterServiceServer).ListMasters(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMasterService_GetMasterByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMasterServiceServer).GetMasterByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMasterService_GetMasterByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMasterServiceServer).GetMasterByID(ctx, req.(*MasterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMasterService_CreateMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMasterServiceServer).CreateMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMasterService_CreateMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMasterServiceServer).CreateMaster(ctx, req.(*CreateMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMasterService_UpdateMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMasterServiceServer).UpdateMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMasterService_UpdateMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMasterServiceServer).UpdateMaster(ctx, req.(*UpdateMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserMasterService_ServiceDesc is the grpc.ServiceDesc for UserMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermaster.UserMasterService",
	HandlerType: (*UserMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UserMasterService_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserMasterService_LoginUser_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _UserMasterService_GetUserProfile_Handler,
		},
		{
			MethodName: "ListMasters",
			Handler:    _UserMasterService_ListMasters_Handler,
		},
		{
			MethodName: "GetMasterByID",
			Handler:    _UserMasterService_GetMasterByID_Handler,
		},
		{
			MethodName: "CreateMaster",
			Handler:    _UserMasterService_CreateMaster_Handler,
		},
		{
			MethodName: "UpdateMaster",
			Handler:    _UserMasterService_UpdateMaster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_master.proto",
}
