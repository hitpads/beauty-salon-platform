// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: service_appointment.proto

package serviceappointment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceAppointmentService_ListServices_FullMethodName         = "/appointment.ServiceAppointmentService/ListServices"
	ServiceAppointmentService_GetServiceById_FullMethodName       = "/appointment.ServiceAppointmentService/GetServiceById"
	ServiceAppointmentService_CreateAppointment_FullMethodName    = "/appointment.ServiceAppointmentService/CreateAppointment"
	ServiceAppointmentService_ListUserAppointments_FullMethodName = "/appointment.ServiceAppointmentService/ListUserAppointments"
	ServiceAppointmentService_CancelAppointment_FullMethodName    = "/appointment.ServiceAppointmentService/CancelAppointment"
)

// ServiceAppointmentServiceClient is the client API for ServiceAppointmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAppointmentServiceClient interface {
	ListServices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListServicesResponse, error)
	GetServiceById(ctx context.Context, in *ServiceIdRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*AppointmentResponse, error)
	ListUserAppointments(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*ListAppointmentsResponse, error)
	CancelAppointment(ctx context.Context, in *AppointmentIdRequest, opts ...grpc.CallOption) (*Empty, error)
}

type serviceAppointmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAppointmentServiceClient(cc grpc.ClientConnInterface) ServiceAppointmentServiceClient {
	return &serviceAppointmentServiceClient{cc}
}

func (c *serviceAppointmentServiceClient) ListServices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, ServiceAppointmentService_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAppointmentServiceClient) GetServiceById(ctx context.Context, in *ServiceIdRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, ServiceAppointmentService_GetServiceById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAppointmentServiceClient) CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*AppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppointmentResponse)
	err := c.cc.Invoke(ctx, ServiceAppointmentService_CreateAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAppointmentServiceClient) ListUserAppointments(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*ListAppointmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppointmentsResponse)
	err := c.cc.Invoke(ctx, ServiceAppointmentService_ListUserAppointments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAppointmentServiceClient) CancelAppointment(ctx context.Context, in *AppointmentIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ServiceAppointmentService_CancelAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAppointmentServiceServer is the server API for ServiceAppointmentService service.
// All implementations must embed UnimplementedServiceAppointmentServiceServer
// for forward compatibility.
type ServiceAppointmentServiceServer interface {
	ListServices(context.Context, *Empty) (*ListServicesResponse, error)
	GetServiceById(context.Context, *ServiceIdRequest) (*ServiceResponse, error)
	CreateAppointment(context.Context, *CreateAppointmentRequest) (*AppointmentResponse, error)
	ListUserAppointments(context.Context, *UserIdRequest) (*ListAppointmentsResponse, error)
	CancelAppointment(context.Context, *AppointmentIdRequest) (*Empty, error)
	mustEmbedUnimplementedServiceAppointmentServiceServer()
}

// UnimplementedServiceAppointmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceAppointmentServiceServer struct{}

func (UnimplementedServiceAppointmentServiceServer) ListServices(context.Context, *Empty) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedServiceAppointmentServiceServer) GetServiceById(context.Context, *ServiceIdRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceById not implemented")
}
func (UnimplementedServiceAppointmentServiceServer) CreateAppointment(context.Context, *CreateAppointmentRequest) (*AppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointment not implemented")
}
func (UnimplementedServiceAppointmentServiceServer) ListUserAppointments(context.Context, *UserIdRequest) (*ListAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAppointments not implemented")
}
func (UnimplementedServiceAppointmentServiceServer) CancelAppointment(context.Context, *AppointmentIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAppointment not implemented")
}
func (UnimplementedServiceAppointmentServiceServer) mustEmbedUnimplementedServiceAppointmentServiceServer() {
}
func (UnimplementedServiceAppointmentServiceServer) testEmbeddedByValue() {}

// UnsafeServiceAppointmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAppointmentServiceServer will
// result in compilation errors.
type UnsafeServiceAppointmentServiceServer interface {
	mustEmbedUnimplementedServiceAppointmentServiceServer()
}

func RegisterServiceAppointmentServiceServer(s grpc.ServiceRegistrar, srv ServiceAppointmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceAppointmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceAppointmentService_ServiceDesc, srv)
}

func _ServiceAppointmentService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAppointmentServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAppointmentService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAppointmentServiceServer).ListServices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAppointmentService_GetServiceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAppointmentServiceServer).GetServiceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAppointmentService_GetServiceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAppointmentServiceServer).GetServiceById(ctx, req.(*ServiceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAppointmentService_CreateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAppointmentServiceServer).CreateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAppointmentService_CreateAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAppointmentServiceServer).CreateAppointment(ctx, req.(*CreateAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAppointmentService_ListUserAppointments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAppointmentServiceServer).ListUserAppointments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAppointmentService_ListUserAppointments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAppointmentServiceServer).ListUserAppointments(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAppointmentService_CancelAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAppointmentServiceServer).CancelAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAppointmentService_CancelAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAppointmentServiceServer).CancelAppointment(ctx, req.(*AppointmentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceAppointmentService_ServiceDesc is the grpc.ServiceDesc for ServiceAppointmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAppointmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appointment.ServiceAppointmentService",
	HandlerType: (*ServiceAppointmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _ServiceAppointmentService_ListServices_Handler,
		},
		{
			MethodName: "GetServiceById",
			Handler:    _ServiceAppointmentService_GetServiceById_Handler,
		},
		{
			MethodName: "CreateAppointment",
			Handler:    _ServiceAppointmentService_CreateAppointment_Handler,
		},
		{
			MethodName: "ListUserAppointments",
			Handler:    _ServiceAppointmentService_ListUserAppointments_Handler,
		},
		{
			MethodName: "CancelAppointment",
			Handler:    _ServiceAppointmentService_CancelAppointment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_appointment.proto",
}
